### This is the config file. Make sure with comma-separated values(arrays) there are no spaces, otherwise input loading will fail.
# the number of runs per instance
total_runs=5
# the size of the population for one generation
population_size=8
# tournament size for crossover, should not exceed population size
tournament_size=6
# innovation rate, used for memeplex mutation, a double ranging from 0.0 to 1.0; 0.2 considered optimum
innovation_rate=0.2
# runtime:
# A number: e.g. 1000(means it runs for 1 seconds)
# left blank: infinite, not recommended unless using suitable termination criterion
runtime=10000
# number of generations/cycles:
# A number: e.g. 20
# left blank: infinite, not recommended unless using suitable termination criterion, should set a max generation rather than runtime
max_generations=150
# infeasible solutions can be:
# PENALTY: sets the score of the solution to a value that is worse than the worst e.g. -1
# REPAIR: repairs the solution until it is feasible
# [penalty, repair]
infeasible_solution=penalty
# selection operator is to do with criterion when selection of parents are the same
# SAME_PARENTS_ALLOWED: the same parents are not allowed
# SAME_PARENTS_NOT_ALLOWED: the same parents selected are not allowed
# [same_parents_allowed, same_parents_not_allowed]
selection_operator=same_parents_allowed
# initial solution generations can be:
# RANDOM: for each solution, bits are determined as 1s or 0s randomly
# CONSTRUCTIVE: using some form of method to determine the best starting solution e.g. for knapsack problem price/weight
# GREEDY: sort by the desired values and choose that until a certain cap is met
# [random, constructive, greedy]
initial_generation=constructive
###
# depth of search determines how many times the local search operator is applied to a solution
# should be in a range of natural numbers, excluding 0 e.g. 1, 2, 3
# the higher the number the slower performance with no improvement, 2 is considered optimal
depth_of_search=2
# memes section, each type of meme can have x options, list as below; use at least 1 of them in each array
# ... means there are further heuristics which haven't been developed
# to select which ones to use, use the index in the array e.g. 0, 1, 2, 3
# INTENSITY_OF_MUTATION: the intensity of mutations; any array of integers e.g. [0, 1, 2, 3, 4]; we use n / variable length as the mutation rate for mutational heuristics
intensities_of_mutation=3,4,5
# CROSSOVER: the crossover operator; [one_point, two_point, uniform...]
crossover=0,1,2
# INHERITANCE: the memeplex inheritance operators; [simple_memeplex, ...]
inheritance=0
# LOCAL_SEARCH: the local search operators; [davisbit_improvement_only, davisbit_non_worsening, steepestascent_improvement_only, steepestascent_non_worsening, ...]
local_search=0,1,2,3
# MUTATION: the mutation operators: [bit, swap, inversion ...]
mutation=0,1,2
# REPLACEMENT: the replacement operator concerns multimeme search directly; [transgenerational_replacement_elitism, ...]
replacement=0
# SELECTION: the selection operator; [tournament_selection, roulette_wheel...]
selection=0,1
# OUTPUT settings
# number of generations that should be read into the file that will be stored, should not exceed the generation size
# this setting is used for population-based searches
# if left blank it will try to record every generation, which is not advised
number_of_generation_output=100
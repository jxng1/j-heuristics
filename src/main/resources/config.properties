total_runs=5
population_size=4
# runtime can be:
# A number e.g. 1000(in ms e.g. corresponds to 1 second)
# or left blank(runs for maximum time)
runtime=
max_generations=40
intensity_of_mutation=0.2
# infeasible solutions can be:
# PENALTY: sets the score of the solution to a value that is worse than the worst e.g. -1
# REPAIR: repairs the solution until it is feasible
# [penalty, repair]
infeasible_solution=penalty
# initial solution generations can be:
# RANDOM: for each solution, bits are determined as 1s or 0s randomly
# CONSTRUCTIVE: using some form of method to determine the best starting solution e.g. for knapsack problem price/weight
# GREEDY: sort by the desired values and choose that until a certain cap is met
# [random, constructive, greedy]
initial_generation=constructive
# memes section, each type of meme can have x options, list as below; use at least 1 of them in each array
# ... means there are further heuristics which haven't been developed
# INTENSITY_OF_MUTATION: the intensity of mutations; any array of doubles ranging from 0.0 to 1.0 e.g. [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]; 0.2 is considered the optimum
intensitiy_of_mutations=0.0, 0.2, 0.4, 0.6, 0.8, 1.0
# CROSSOVER: the crossover operator; [one_point_crossover, ...]
crossover=one_point_crossover
# INHERITANCE: the memeplex inheritance operators; [simple_memeplex, ...]
inheritance=simple_memeplex
# LOCAL_SEARCH: the local search operators; [davisbit_improvement_only, davisbit_non_worsening, steepestdescent_improvement_only, steepestdescent_non_worsening, ...]
local_search=davisbit_improvement_only, davisbit_non_worsening, steepestdescent_improvement_only, steepestdescent_non_worsening
# MUTATION: the mutation operators: [bit_mutation, ...]
mutation=bit_mutation
# REPLACEMENT: the replacement operators; [transgenerational_replacement_elitism, ...]
replacement=transgeneration_replacement_elitism
# SELECTION: the selection operator; [tournament_selection, ...]
selection=tournament_selection